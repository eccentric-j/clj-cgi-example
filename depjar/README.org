#+title: Depjar

* Purpose

When using Babashka to create Clojure websites on shared hosts, there are three
main options to include them in projects.

1. Uberjar all your libraries from a =deps.edn= file using Babashka and Clojure CLIs
2. Uberjar each library separately
3. [[Uberscript][https://book.babashka.org/#_uberscript]] your script sources and libraries into a single

Check out
https://93632dbe219c.ngrok.io/blog/clojure-like-its-php.html#working-with-libraries
for a deeper breakdown and explanation of each method.

* Usage

#+begin_src bash
./depjar.clj ./deps.edn
#+end_src

** What does it do?
1. Splits the provied deps.edn file into separate deps.edn files
2. For each isolated deps.edn file save it into a separate temporary directory
3. Installs the dep, and generates the classpath with clojure sources removed
4. Uberjars the libary into a single .jar
5. Moves the bundled uberjar to current directory with the output name specified like =honeysql.jar=
6. Removes the temporary directory and files
7. Continues for each library

* Requirements

1. Babashka to run the ~bb~ that powers the depjar.clj script
2. The Clojure CLI to generate the classpath string and install deps from a
   =deps.edn= file
3. A JVM which required by the Clojure CLI

* Add to your path

It may be helpful if you create a symlink to the script that is part of your
PATH environment variable. This way you can run ~depjar~ from any directory.

#+begin_src bash :results none
ln -s ~/Projects/clj-cgi-example/depjar/depjar.clj ~/bin/depjar
#+end_src

You should be able to run ~depjar~ anywhere.

* Motivation

When figuring out how to run the uberjar command to bundle each library up I
found it somewhat tedious to manually remove the previous deps.edn entry, add
the new one, and run the commands to uberjar it so this is to help streamline
that process.
